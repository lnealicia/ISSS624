---
title: "Take Home Exercise 2"
date: "6 December 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started

-   sf - importing, integrating, processing and transforming geospatial data.

-   tidyverse - importing, integrating, wrangling and visualising data.

-   tmap - creating thematic maps.

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

## Preparing the Flow Data

### Importing the OD data

Import the `Passenger Volume by Origin Destination Bus Stops` data set downloaded from LTA DataMall

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

Check `odbus` tibble data frame

```{r}
glimpse(odbus)
```

Note: Values in `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are character data type

Converting `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` columns from character data type to factors in R (categorical data type)

```{r}
odbus$ORIGIN_PT_CODE <-
as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <-
as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the Study Data

Filter out data that belong to trips that occur during "Weekday" and "6-9am" (wdmp)

    ```{r}
    wdmp <- odbus %>%
      filter(DAY_TYPE == "WEEKDAY") %>%
      filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
      group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
      summarise(TRIPS = sum(TOTAL_TRIPS))
    ```

Check resulting data table

```{r}
head(wdmp)
```

Output saved in rds format for future use

```{r}
write_rds(wdmp, "data/rds/wdmp.rds") 
```

Import the rds file into R environment

```{r}
wdmp <- read_rds("data/rds/wdmp.rds") 
```

## Geospatial Data

Two geospatial data will be used for this exercise:

-   BusStop: Provides location of bus stop as at Q4 2022

-   MPSZ-2019: Provides the sub-zone boundary of URA Master Plan 2019

### Importing Bus Stop Locations

```{r}
busstop <- st_read(dsn = "Data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```
### Importing Singapore Map

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

Check structure of `busstop` and `MPSZ` sf tibble data frame

```{r}
glimpse(busstop)
```

```{r}
glimpse(mpsz)
```

## Hexagon Grid Setup

An analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) is used to represent the traffic analysis zone (TAZ).

### Drawing the Hexagon Grid

Draw hexagon grid over the `mpsz` map

```{r}
hexagon_grid = st_make_grid(mpsz, c(750, 750), what = "polygons", square = FALSE)
```

Convert the hexagon grid to sf (simple features) object and add a new column *grid_id* (sequential identifier) to it

```{r}
grid_sf = st_sf(hexagon_grid) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid)))
```

Assign bus stops to hexagon *grid_ids*

```{r}
busstop_grid <- st_intersection(grid_sf,busstop) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

Save output into rds format

```{r}
write_rds(busstop_grid, "data/rds/busstop_grid.rds")
```

Check for duplicate records

```{r}
duplicate <- busstop_grid %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Retain unique records only

```{r}
busstop_grid <- unique(busstop_grid)
```

### Replace Bus Stop Code with Corresponding Hexagon Grid ID

`wdmp` left join with `busstop_grid` for *ORIGIN_PT_CODE*

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N"))
```
Rename column to *o_grid_id*

```{r}
wdmp <- wdmp %>%
  rename(o_grid_id = grid_id)

```

`wdmp` left join with `busstop_grid` for *DESTINATION_PT_CODE*

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("DESTINATION_PT_CODE" = "BUS_STOP_N"))
```

Rename column to *d_grid_id*

```{r}
wdmp <- wdmp %>%
  rename(d_grid_id = grid_id)
```

Remove bus stop codes

```{r}
wdmp <- wdmp %>%
  ungroup() %>%
  select(-c(ORIGIN_PT_CODE, DESTINATION_PT_CODE))

```

Remove trips that have the same origin and destination grid_id

```{r}
wdmp <- wdmp %>%
  filter(o_grid_id != d_grid_id)
```

## Converting from sf data.table to SpatialPolygonsDataFrame

`grid_sf` is converted from sf tibble data frame to SpatialPolygonsDataFrame of sp object

```{r}
grid_sp <- as(grid_sf, "Spatial")
grid_sp
```

## Computing the distance matrix


Euclidean distance between the centroids of the hexagons

```{r}
euc_dist <- spDists(grid_sp, 
                longlat = FALSE)
head(euc_dist, n=c(10, 10))
```
Note: Output distance is a matrix object class of R. Column headers and row headers are also not labeled with the hexagon grid id.

## Labelling column and row headers of a distance matrix

Create a list sorted according to the the distance matrix by hexagon grid id

```{r}
grid_id <- grid_sf$grid_id
```

Attach `grid_id` to row and column for distance matrix matching

```{r}
colnames(euc_dist) <- paste0(grid_id)
rownames(euc_dist) <- paste0(grid_id)
```

### Pivoting distance value by `grid_id`

Pivot the distance matrix into a long table by using the row and column hexagons

```{r}
dist_pair <- melt(euc_dist) %>%
  rename(euc_dist = value)
head(dist_pair, 10)
```

Note: Within zone distance is 0

### Updating intra-zonal distances

Append a constant value to replace the intra-zonal distance of 0.

Select and find out the minimum value of the distance

```{r}
dist_pair %>%
  filter(euc_dist > 0) %>%
  summary()
```

::: {.callout-tip title="Statistical Conclusion" style="color: gray"}
Weekday Morning Peak 6am-9am

Describe spatial pattern <= 100 words
:::
