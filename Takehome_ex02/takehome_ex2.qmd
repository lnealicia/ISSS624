---
title: "Take Home Exercise 2"
date: "6 December 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

# Geospatial Data Science

## Getting Started

-   sf - importing, integrating, processing and transforming geospatial data.

-   tidyverse - importing, integrating, wrangling and visualising data.

-   tmap - creating thematic maps.

```{r}
pacman::p_load(tmap, sf, sp, DT, stplanr,
               performance, reshape2,
               ggpubr, tidyverse, httr, ggplot2)
```

## Preparing the Flow Data

### Importing the OD data

Import the `Passenger Volume by Origin Destination Bus Stops` data set downloaded from LTA DataMall

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

Check `odbus` tibble data frame

```{r}
glimpse(odbus)
```

Note: Values in `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are character data type

Converting `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` columns from character data type to factors in R (categorical data type)

```{r}
odbus$ORIGIN_PT_CODE <-
as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <-
as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the Study Data

Filter out data that belong to trips that occur during "Weekday" and "6-9am" (wdmp)

```{r}
wdmp <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Check resulting data table

```{r}
head(wdmp)
```

Output saved in rds format for future use

```{r}
write_rds(wdmp, "data/rds/wdmp.rds") 
```

Import the rds file into R environment

```{r}
wdmp <- read_rds("data/rds/wdmp.rds") 
```

## Geospatial Data

Two geospatial data will be used for this exercise:

-   BusStop: Provides location of bus stop as at Q4 2022

-   MPSZ-2019: Provides the sub-zone boundary of URA Master Plan 2019

### Importing Bus Stop Locations

```{r}
busstop <- st_read(dsn = "Data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

### Importing Singapore Map

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

Check structure of `busstop` and `MPSZ` sf tibble data frame

```{r}
glimpse(busstop)
```

```{r}
glimpse(mpsz)
```

## Hexagon Grid Setup

An analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) is used to represent the traffic analysis zone (TAZ).

### Drawing the Hexagon Grid

Draw hexagon grid over the `mpsz` map

```{r}
hexagon_grid = st_make_grid(mpsz, c(750, 750), what = "polygons", square = FALSE)
```

Convert the hexagon grid to sf (simple features) object and add a new column **grid_id** (sequential identifier) to it

```{r}
grid_sf = st_sf(hexagon_grid) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid)))
```

Assign bus stops to hexagon **grid_id**

```{r}
busstop_grid <- st_intersection(grid_sf,busstop) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

Save output into rds format

```{r}
write_rds(busstop_grid, "data/rds/busstop_grid.rds")
```

Retain unique records only

```{r}
busstop_grid <- unique(busstop_grid)
```

### Replace Bus Stop Code with Corresponding Hexagon Grid ID

`wdmp` left join with `busstop_grid` for **ORIGIN_PT_CODE**

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N"))
```

Rename column to **ori_grid**

```{r}
wdmp <- wdmp %>%
  rename(ori_grid = grid_id)

```

`wdmp` left join with `busstop_grid` for **DESTINATION_PT_CODE**

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("DESTINATION_PT_CODE" = "BUS_STOP_N"))
```

Rename column to **desti_grid**

```{r}
wdmp <- wdmp %>%
  rename(desti_grid = grid_id)
```

Remove bus stop codes

```{r}
wdmp <- wdmp %>%
  ungroup() %>%
  select(-c(ORIGIN_PT_CODE, DESTINATION_PT_CODE))

```

Remove any NA values

```{r}
wdmp <- na.omit(wdmp)
```

Reorder columns to Origin, Destination, Number of Trips

```{r}
wdmp <- wdmp %>%
  select(ori_grid, desti_grid, TRIPS)
```

## Visualising Spatial Interaction

### Removing intra-zonal flows

```{r}
wdmp1 <- wdmp[wdmp$ori_grid != wdmp$desti_grid, ]
```

### Creating desire lines

```{r}
flowLine <- od2line(flow = wdmp1, 
                    zones = grid_sf,
                    zone_code = "grid_id")
```

### Visualising the desire lines

Flow data is very messy and highly skewed, thus focus is placed on selected flows e.g. flow \>= 5000

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

Hexagons involved in most taken bus route

```{r}
max_wdmp_row <- wdmp[which.max(wdmp$TRIPS), ]

ori_grid_max <- max_wdmp_row$ori_grid
desti_grid_max <- max_wdmp_row$desti_grid
```

Hexagons with the highest volume of trips

```{r}
max_wdmp_row
```

Note: Trips originating from grid id 1350, with destination 1375 has the highest volume (i.e. 96630 trips)

Locating the bus stops contained within the hexagons and their locations

```{r}
ori_busstop <- busstop_grid$BUS_STOP_N[busstop_grid$grid_id == ori_grid_max]

desti_busstop <- busstop_grid$BUS_STOP_N[busstop_grid$grid_id == desti_grid_max]
```

List of bus stops of interest

```{r}
ori_busstop
desti_busstop
```

Location of bus stops of interest

```{r}
busstop_locations_ori <- busstop$LOC_DESC[match(ori_busstop, busstop$BUS_STOP_N)]
busstop_locations_desti <- busstop$LOC_DESC[match(desti_busstop, busstop$BUS_STOP_N)]
```

```{r}
busstop_locations_ori 
busstop_locations_desti
```

Note: We can see that the locations with the highest volume of trips involve trips that originate from Malaysia into Singapore, across the causeway. Bus Stop 46159 Blk 206 and Bus Stop 46151 Blk 212 both correspond to Marsiling Lane, which is near the Woodlands checkpoint.

Information from:

[TransitLink Bus Stop 46159](https://www.transitlink.com.sg/eservice/eguide/bscode_idx.php?bs_code=46159)

[TransitLink Bus Stop 46151](https://www.transitlink.com.sg/eservice/eguide/bscode_idx.php?bs_code=46151)

::: {.callout-tip title="Statistical Conclusion" style="color: gray"}
Weekday Morning Peak 6am-9am

Upon examination, a notable trend emerges with heightened activity at transit points like Woodlands checkpoint, indicating substantial cross-border commuting. Specifically, bus stops 46159 Blk 206 and 46151 Blk 212 also located near the checkpoint highlight the significance of these transit nodes. With bus stops servicing this area having the greatest trips volume. In addition, the observed concentration of trips between residential zones (e.g., Bukit Batok) and industrial hubs (e.g., Tuas, Loyang) also reveals a distinct commuting pattern. This concentration suggests a predominant pattern of people commuting from their homes in residential estates or across the border from Malaysia to their workplaces in office and industrial areas.
:::

## Propulsive and Attractiveness Variables

## Effect of Distance on Number of Trips

### Converting from sf data.table to SpatialPolygonsDataFrame

`grid_sf` is converted from sf tibble data frame to SpatialPolygonsDataFrame of sp object

```{r}
grid_sp <- as(grid_sf, "Spatial")
grid_sp
```

### Computing the distance matrix

Euclidean distance between the centroids of the hexagons

```{r}
euc_dist <- spDists(grid_sp, 
                longlat = FALSE)
head(euc_dist, n=c(10, 10))
```

Note: Output distance is a matrix object class of R. Column headers and row headers are also not labeled with the hexagon grid id.

### Labelling column and row headers of distance matrix

Create a list sorted according to the the distance matrix by hexagon grid id

```{r}
grid_id <- grid_sf$grid_id
```

Attach `grid_id` to row and column for distance matrix matching

```{r}
colnames(euc_dist) <- paste0(grid_id)
rownames(euc_dist) <- paste0(grid_id)
```

### Pivoting distance value by `grid_id`

Pivot the distance matrix into a long table by using the row and column hexagons. Columns are renamed for easy reference.

```{r}
dist_pair <- melt(euc_dist) %>%
  rename(ori_grid = Var1,
         desti_grid = Var2,
         euc_dist = value)
head(dist_pair, 10)
```

### Find mininum inter-zonal difference

An analytical hexagon has an inter-zonal difference of 0 when compared to itself, which inaccurately represents intra-zonal disparity. Thus, a small constant value i.e. smaller than the minimum inter-zonal difference, replaces all instances where the intra-zonal difference is '0'. Therefore, allowing for a more accurate reflection of intra-zonal differences in the distance computation.

```{r}
dist_pair %>%
  filter(euc_dist > 0) %>%
  summary()
```

Note: The smallest distance inter-zonal difference is 750m, which is the the distance between the centres of two adjacent analytical hexagons in this analysis. The intra-zonal distance is thus set to 50m.

```{r}
dist_pair$euc_dist <- ifelse(dist_pair$euc_dist == 0,
                        50, dist_pair$euc_dist)
```

Check resulting data frame

```{r}
dist_pair %>%
  summary()
```

Converting `ori_grid` and `desti_grid` columns to factors in R (categorical data type)

```{r}
dist_pair$ori_grid <-
as.factor(dist_pair$ori_grid)
dist_pair$desti_grid <-
as.factor(dist_pair$desti_grid)
```

Save the dataframe as rds format

```{r}
write_rds(dist_pair, "data/rds/dist_pair.rds") 
```

### Compute the Total Passenger Trips (Between and Within Hexagons)

```{r}
flow_data <- wdmp %>%
  group_by(ori_grid, desti_grid) %>% 
  summarize(TRIPS = sum(TRIPS)) 
```

Display `flow_data` dataframe

```{r}
head(flow_data, 10)
```

### Separating intra-flow (within hexagon) from passenger volume df

Add three new fields in `flow_data` dataframe

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ori_grid == flow_data$desti_grid, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ori_grid == flow_data$desti_grid,
  0.000001, 1)
```

Converting `ori_grid` and `desti_grid` columns to factors in R (categorical data type)

```{r}
flow_data$ori_grid <-
as.factor(flow_data$ori_grid)
flow_data$desti_grid <-
as.factor(flow_data$desti_grid)
```

### Combining passenger volume data with distance value

left_join() `flow_data` dataframe and `dist_pair` dataframe

```{r}
flow_data1 <- flow_data %>%
  left_join (dist_pair,
             by = c("ori_grid" = "ori_grid",
                    "desti_grid" = "desti_grid"))
```

Save output as SIM_data.rds

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```

### Visualising Plot

```{r}
flow_data1 %>%
  st_drop_geometry() %>%
  ggplot(
    aes(
      x = euc_dist, 
      y = TRIPS)) + 
  geom_point(
    size = 1,
    alpha = .6,
    color = "grey") +
  geom_smooth(method = lm) +
  ggtitle("Trips ~ Distance")
```

```{r}
flow_data1 %>%
  st_drop_geometry() %>%
  ggplot(
    aes(x = log(euc_dist), 
        y = log(TRIPS))) +
  geom_point(
    size = 1,
    alpha = .6,
    color = "lightgreen") +
  geom_smooth(method = lm) +
  ggtitle("Log(Trips ~ Distance)")

```

Note: Based on the above plots, there seems to be no linear trend when using absolute values. However, there seems to be an inverse linear trend when the data is log transformed. This indicates that the further the distance, the fewer trips.

## Propulsive Attributes

Since the time period being analysed is Weekday Morning Peak, propulsive attributes are likely related to:

-   Train Station Exits - Part of commute between residence & work/school
-   Food & Beverage (F&B) - Breakfast locations before commute
-   HDB - Residences/Homes

### Importing of Train Station Exit Locations

```{r}
mrt_exit <- st_read(dsn = "Data/geospatial",
                   layer = "Train_Station_Exit_Layer") %>%
  st_transform(crs = 3414)
```

### Number of Train Station Exits per Location

```{r}

grid_attr <- grid_sf

grid_attr$mrt_exit <- lengths(st_intersects(grid_sf, mrt_exit))

summary(grid_attr$mrt_exit)

message(paste("There are", sum(grid_attr$mrt_exit), "Train Station Exits that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$mrt_exit), "within grid_id", grid_attr$grid_id[which.max(grid_attr$mrt_exit)]))

```

### Importing of F&B locations

```{r}
fnb <- st_read(dsn = "Data/geospatial",
                   layer = "F&B") %>%
  st_transform(crs = 3414)
```

### Number of F&B per Location

```{r}
grid_attr$fnb <- lengths(st_intersects(grid_sf, fnb))

summary(grid_attr$fnb)

message(paste("There are", sum(grid_attr$fnb), " Food & Beverage establishments that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$fnb), "within grid_id", grid_attr$grid_id[which.max(grid_attr$fnb)]))
```

### Importing of residential HDBs

```{r}
hdb <- read_csv("data/aspatial/hdb.csv")
```

Remove duplicates, select only residential properties and relevant columns

```{r}

hdb <- unique(hdb)

hdb <- hdb %>%
  filter(residential == "Y") %>%
  select(
    blk_no,
    street,
    postal,
    total_dwelling_units,
    lng,
    lat
  )
```

Rename columns for ease of reference

```{r}
hdb <- hdb %>%
  rename(
    longitude = lng,
    latitude = lat
  )
```

### Converting an aspatial data into a simple features tibble data.frame

```{r}
hdb_sf <- st_as_sf(hdb,
                   coords = c("longitude", "latitude"),
                   crs = 4326) %>%
  st_transform(crs = 3414)
```

### Number of HDB per Location

```{r}
grid_attr$hdb <- lengths(st_intersects(grid_sf, hdb_sf))

summary(grid_attr$hdb)

message(paste("There are", sum(grid_attr$hdb), " residential HDB buildings that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$hdb), "within grid_id", grid_attr$grid_id[which.max(grid_attr$hdb)]))
```

## Attractive Attributes

Since the time period being analysed is Weekday Morning Peak, attractive attributes are likely related to:

-   Business - Work Location
-   Financial Services (FinServ) - Work Location
-   School - youths of school-going age commuting to school

### Importing of Business Locations

```{r}
biz <- st_read(dsn = "Data/geospatial",
                   layer = "Business") %>%
  st_transform(crs = 3414)
```

### Number of Businesses per Location

```{r}

grid_attr$biz <- lengths(st_intersects(grid_sf, biz))

summary(grid_attr$biz)

message(paste("There are", sum(grid_attr$biz), " Businesses that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$biz), "within grid_id", grid_attr$grid_id[which.max(grid_attr$biz)]))
```

The location with the most number of businesses is grid id 3942, with 126 businesses located within.

### Importing of Financial Services Locations

```{r}
fs <- st_read(dsn = "Data/geospatial",
                   layer = "FinServ") %>%
  st_transform(crs = 3414)
```

### Number of Financial Services per Location

```{r}
grid_attr$fs <- lengths(st_intersects(grid_sf, fs))

summary(grid_attr$fs)

message(paste("There are", sum(grid_attr$fs), " Financial Services that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$fs), "within grid_id", grid_attr$grid_id[which.max(grid_attr$fs)]))
```
Note: The hexagaon with grid_id 2009 also boasts the highest count of train station exits!

### Importing of School Locations

```{r}
sch <- read_csv("data/aspatial/schools.csv")
```

Remove duplicates, select only relevant columns

```{r}
sch <- unique(sch)

sch <- sch %>%
  select(
    results.LATITUDE,
    results.LONGITUDE,
    postal_code, 
    school_name
  )

```

Rename columns for ease of reference

```{r}
sch <- sch %>%
  rename(
    latitude = results.LATITUDE,
    longitude = results.LONGITUDE
  )
```

### Converting an aspatial data into a simple features tibble data.frame

```{r}
sch_sf <- st_as_sf(sch,
                   coords = c("longitude", "latitude"),
                   crs = 4326) %>%
  st_transform(crs = 3414)
```

### Number of Schools per Location

```{r}
grid_attr$sch <- lengths(st_intersects(grid_sf, sch_sf))

summary(grid_attr$sch)

message(paste("There are", sum(grid_attr$sch), " Schools that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$sch), "within grid_id", grid_attr$grid_id[which.max(grid_attr$sch)]))
```
## Check Propulsive and Attractive Attributes

Check `grid_attr`

```{r}
grid_attr
```

# Spatial Interaction Modelling

Select attributes relevant Propulsive Attributes and Attractive Attributes for Spatial Interaction Modelling

```{r}
attr <- grid_attr %>%
  st_drop_geometry() %>%
  mutate(
    grid_id = as.factor(grid_id)
  )
```

### Flow by Origin

Retain only propulsive attributes

```{r}
attr_flow <- left_join(
  dist_pair,
  attr,
  by = c("ori_grid" = "grid_id")) %>%
  rename(
    ori_mrt_exit = mrt_exit,
    ori_fnb = fnb,
    ori_hdb = hdb
  ) %>%
  select(
    -c(fs,biz,sch))

```

### Flow by Destination

Retain only attractive attributes

```{r}
attr_flow <- left_join(
  attr_flow,
  attr,
  by = c("desti_grid" = "grid_id")) %>%
  rename(
    desti_fs = fs,
    desti_biz = biz,
    desti_sch = sch
  ) %>%
  select(
    -c(mrt_exit,fnb,hdb)
  )
```

### Add Trips

```{r}
attr_flow <- left_join(
  attr_flow,
  flow_data,
  by = c("ori_grid", "desti_grid")) %>%
  select(
    -c(FlowNoIntra, offset)
  )
```

### Remove NULL values

There are some routes from ori_grid to desti_grid that have 0 or NULL trips. These will be removed

```{r}
attr_flow <- attr_flow %>%
  filter(!is.na(TRIPS) & TRIPS != 0)
```

### Summary of attributes

```{r}
summary(attr_flow)
```
Note: Columns with prefix "ori" or "desti" have 0 values

### Replacing 0 values

0 values in columns with prefix "ori" or "desti" will be replaced with a small value i.e. 0.99

```{r}
attr_flow <- attr_flow %>%
  mutate_at(vars(ori_mrt_exit, ori_fnb, ori_hdb, desti_fs, desti_biz, desti_sch),
            ~ ifelse(. == 0, 0.99, .))
```

Check `attr_flow` again
```{r}
summary(attr_flow)
```

Save output indo rds

```{r}
write_rds(attr_flow, "data/rds/sim_data.rds")
```

### Linear Correlation between Trips and Propulsive Attributes

#### Train Station Exits

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(ori_mrt_exit),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Train Strain Station Exits")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(ori_mrt_exit), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(ori_mrt_exit)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: blue"}
Given the regression equation:
log(TRIPS) = 3.593 + 0.141 * log(ori_mrt_exit) 

There seems to be a positive correlation between number of trips and the number of train station exits.
:::

#### Food & Beverage Establishments

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(ori_fnb),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Food & Beverage Establishments")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(ori_fnb), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(ori_fnb)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: blue"}
Given the regression equation:
log(TRIPS) = 3.686 + -0.076 * log(ori_fnb)

There seems to be a negative correlation between number of trips and the number of food & beverage establishments. Conversely to hypothesised, this is not a strong propulsive attribute.
:::


#### Residential HDB buildings

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(ori_hdb),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Residential HDB buildings")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(ori_hdb), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(ori_hdb)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: blue"}
Given the regression equation:
log(TRIPS) = 2.894 + 0.401 * log(ori_hdb) 

There seems to be a negative correlation between number of trips and the number of residential HDB buildings.
:::

### Linear Correlation between Trips and Attractive Attributes

#### Financial Services

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(desti_fs),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Financial Services")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(desti_fs), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(desti_fs)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: green"}
Given the regression equation:
log(TRIPS) = 3.383 + 0.201 * log(desti_fs) 

There seems to be a positive correlation between number of trips and the number of financial services.
:::

#### Businesses

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(desti_biz),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Businesses")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(desti_biz), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(desti_biz)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: green"}
Given the regression equation:
log(TRIPS) = 3.497 + 0.147 * log(desti_biz) 

There seems to be a positive correlation between number of trips and the number of businesses.
:::

#### Schools

```{r}
attr_flow %>%
      ggplot(
        aes(x = log(desti_sch),
            y = log(TRIPS))
      ) +
      geom_point(
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(
        axis.text.x = element_blank()
      ) +
      ggtitle("Trips ~ Schools")
```

#### Regression Equation

```{r}
linear_model <- lm(log(TRIPS) ~ log(desti_sch), data = attr_flow)

intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]

equation <- sprintf("log(TRIPS) = %.3f + %.3f * log(desti_sch)", intercept, slope)

cat("Regression Equation:\n", equation, "\n")

```

::: {.callout-tip title="Statistical Conclusion" style="color: green"}
Given the regression equation:
log(TRIPS) = 3.601 + 0.398 * log(desti_sch)  

There seems to be a positive correlation between number of trips and the number of schools.
:::

## Origin Constrained

-1 is used to exclude the intercept term from the Poisson regression model

```{r}
oriSIM <- glm(
    formula = TRIPS ~ ori_grid 
            + log(desti_fs)
            + log(desti_biz) 
            + log(desti_sch)
            + log(euc_dist) - 1,
    family = poisson(link = "log"),
    data = attr_flow,
           na.action = na.exclude)
```

Results

```{r}
summary(oriSIM)
```

::: {.callout-tip title="Statistical Conclusion" style="color: purple"}
XXX
:::

## Destination Constrained

```{r}
destiSIM <- glm(
    formula = TRIPS ~ desti_grid 
            + log(ori_mrt_exit)
            + log(ori_fnb) 
            + log(ori_hdb)
            + log(euc_dist),
    family = poisson(link = "log"),
    data = attr_flow,
           na.action = na.exclude)
```

Results

```{r}
summary(destiSIM)
```

::: {.callout-tip title="Statistical Conclusion" style="color: purple"}
YYY
:::

## Doubly Constrained

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ori_grid + 
                desti_grid +
                log(euc_dist),
              family = poisson(link = "log"),
              data = attr_flow,
              na.action = na.exclude)
```

Results

```{r}
summary(dbcSIM)
```

::: {.callout-tip title="Statistical Conclusion" style="color: purple"}
YYY
:::

## Unconstrained

```{r}
uncSIM <- glm(formula = TRIPS ~ 
                ori_grid + 
                desti_grid +
                euc_dist,
              family = poisson(link = "log"),
              data = attr_flow,
              na.action = na.exclude)
```

Results

```{r}
summary(uncSIM)
```

::: {.callout-tip title="Statistical Conclusion" style="color: purple"}
YYY
:::

## Model Diagnostics

### R-squared

Measure how much variation of the trips can be accounted by the model

```{r}
calc_r2 <- function(observed, estimated){
  r <- cor(observed, estimated)
  R2 <- r^2
  R2
}
```

### R-squared value for each model

```{r}
message(paste("R-squared value for Origin Constrained Model is:", calc_r2(oriSIM$data$trips, oriSIM$fitted.values)))
        
message(paste("R-squared value for Origin Constrained Model is:", calc_r2(destiSIM$data$trips, destiSIM$fitted.values)))

message(paste("R-squared value for Destination Constrained Model is:",calc_r2(destiSIM$data$trips, destiSIM$fitted.values)))

message(paste("R-squared value for Doubly Constrained Model is:",calc_r2(dbcSIM$data$trips, dbcSIM$fitted.values)))

message(paste("R-squared value for Unconstrained Model is:",calc_r2(uncSIM$data$trips, uncSIM$fitted.values)))
```

::: {.callout-tip title="Statistical Conclusion" style="color: red"}
YYY
:::

### RMSE

```{r}
model_list <- list(
  origin_constrained = oriSIM,
  destination_constrained = destiSIM,
  doubly_constrained = dbcSIM,
  uncontrained = uncSIM)

compare_performance(model_list,
                    metrics = "RMSE")
```

::: {.callout-tip title="Statistical Conclusion" style="color: red"}
YYY
:::

### Visualising fitted

Visualise observed values and fitted values

Extract the fitted values from each model

```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

Join the values to `SIM_data` data frame

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

Repeat for Origin Constrained SIM (i.e. oriSIM)

```{r}
df <- as.data.frame(oriSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(oriTRIPS = "oriSIM$fitted.values")
```

Repeat for Destination Constrained SIM (i.e. destiSIM)

```{r}
df <- as.data.frame(destiSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "destiSIM$fitted.values")
```

Repeat for Doubly Constrained SIM (i.e. dbcSIM)

```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

::: {.callout-tip title="Statistical Conclusion" style="color: red"}
YYY
:::
