### Importing HDB data

```{r}
csv <- read_csv("data/aspatial/hdb.csv")
```

Remove duplicates, keep only residential properties, select relevant columns, rename columns for ease of analysis

```{r}
csv_unique <- csv %>% 
  distinct(lat, lng, addr, .keep_all = TRUE)

csv <- csv_unique %>% 
  filter(residential == "Y") %>% 
  select(latitude = lat,
         longitude = lng,
         POI_NAME = building,
         POI_ST_NUM = blk_no,
         POI_ST_NAM = street,
         postal,
         addr,
         total_dwelling_units,
         SUBZONE_N)
```

### Geocoding using SLA API

Note: Ideally, using the hdb postal code, we can get its corresponding latitude and longitude. However, upon opening the hdb.csv file, we notice that 79 postal codes are missing (i.e. NIL instead of number). For those that have missing postal codes, we use the addr column to get the corresponding latitude and longitude.

```{r}
url <- "https://www.onemap.gov.sg/api/common/elastic/search"
csv <- read_csv("data/aspatial/hdb.csv")
postcodes <- csv$`postal`

found <- data.frame()
not_found <- data.frame()

for(postcode in postcodes){
  query <- list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')
  res <- GET(url, query = query)
  
  if (content(res)$found != 0) {
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {
    if (postcode == "NIL") {
      # Use addr to pull in correct data for postal
      addr_query <- list('searchVal' = csv$`addr`, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')
      addr_res <- GET(url, query = addr_query)
      
      if (content(addr_res)$found != 0) {
        found <- rbind(found, data.frame(content(addr_res))[4:13])
      } else {
        not_found <- rbind(not_found, data.frame(postcode))
      }
    } else {
      not_found <- rbind(not_found, data.frame(postcode))
    }
  }
}
```

Checking for data that could still be missing

```{r}
not_found
```

Note:

Info for xyz still missing. Convert corresponding latitude and longitude into x and y coordinates

```{r}

```

Note: hdb_filtered is a tibble dataframe object class

### Converting an aspatial data into a simple features tibble data.frame

```{r}
hdb_sf <- st_as_sf(hdb_filtered,
                       coords = c("longitude", "latitude"),
                       crs =3414)  %>%
  st_transform(crs = 3414)
```

```{r}
print(hdb_sf)
```

### Importing & tidying Financial Services data

```{r}
finserv <- st_read(dsn = "Data/geospatial",
                   layer = "FinServ") %>%
  st_transform(crs = 3414)
```

### Importing & tidying Business data

```{r}
business <- st_read(dsn = "Data/geospatial",
                   layer = "Business") %>%
  st_transform(crs = 3414)
```

## Plotting a point simple feature layer

```{r}
tmap_mode("view")

# Plot HDB
hdb_map <- tm_shape(hdb_sf) +
  tm_dots(col = "red") + tm_view(set.zoom.limits = c(11,14))   

# Plot Business
business_map <- tm_shape(business) +
  tm_dots("green") + tm_view(set.zoom.limits = c(11,14)) 

# Plot Finserv
finserv_map <- tm_shape(finserv) +
  tm_dots(col = "blue") + tm_view(set.zoom.limits = c(11,14))  

# Combine the maps
final_map <- tmap_arrange(business_map, hdb_map, finserv_map, asp = 1, ncol = 3)

# View the map
final_map
tmap_mode("plot")
```
