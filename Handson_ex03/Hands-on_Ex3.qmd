---
title: "Hands-on Exercise 3"
subtitle: "Processing and Visualising Flow Data"
date: "30 Nov 2023"
date-modified: "last-modified"
format: html
editor: visual
---

## Objectives:

## **Getting Started**

-   sf - importing, integrating, processing and transforming geospatial data.

-   tidyverse - importing, integrating, wrangling and visualising data.

-   tmap - creating thematic maps.

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

## **Preparing the Flow Data**

### **Importing the OD data**

Import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package

```{r}
odbus <- read_csv("Data/aspatial/origin_destination_bus_202310.csv")
```

Display *odbus* tibble data table

```{r}
glimpse(odbus)
```

Note that the *odbus* tibble data table shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type. Thus, they need to be converted into character data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

### **Extracting the study data**

Extract commuting flows on weekday and between 0600hrs and 0900hrs.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Display odbus6_9 content

```{r}
datatable(odbus6_9)
```

Save the output in rds format 

```{r}
write_rds(odbus6_9, "Data/rds/odbus6_9.rds")
```

Import into R environment

```{r}
odbus6_9 <- read_rds("Data/rds/odbus6_9.rds")
```

## **Working with Geospatial Data**

Two geospatial data will be used:

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in ESRI shapefile format.

### **Importing geospatial data**

```{r}
busstop <- st_read(dsn = "Data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "Data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

mpsz
```

Write mpsz sf tibble data frame into an rds file

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

## **Geospatial data wrangling**

### **Combining Busstop and mpsz**

Populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
datatable(busstop_mpsz)
```

Save the output into rds format

```{r}
write_rds(busstop_mpsz, "Data/rds/busstop_mpsz.rds")  
```

Append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Check for duplicating records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```

Retain unique records

```{r}
od_data <- unique(od_data)
```

Update od_data data frame with the planning subzone codes

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

Check for duplicating records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```

Retain unique records

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

```{r}
write_rds(od_data, "Data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("Data/rds/od_data.rds")
```

## **Visualising Spatial Interaction**

### **Removing intra-zonal flows**

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### **Creating desire lines**

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### **Visualising the desire lines**

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
