---
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
date: "18 Novemeber 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started

The code chunk below loads the following packages:

-   tmap: for thematic mapping

-   sf: for geospatial data handling

-   tidyverse: for non-spatial data handling

```{r}
pacman::p_load(tmap,sf,tidyverse,knitr,h3jsr)
```

## Preparing the Flow Data

### Importing the OD data

Firstly, we will import the **Passenger Volume by Origin Destination Bus Stops** data set downloaded from LTA DataMall by using read_csv() of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

Check odbus tibble data frame that values in OROGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.

```{r}
glimpse(odbus)
```

Origin & Destination Bus Stop Code

```{r}
odbus$ORIGIN_PT_CODE <-
as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <-
as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the Study Data

Filter out data that belong to trips that occur on "Weekday" and "7-9am"

```{r}

origin7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Check data table

```{r}
kable(head(origin7_9)) 
```

Output saved in rds format for future use

```{r}
write_rds(origin7_9, "data/rds/origin7_9.rds")
```

Import the rds file into R environment

```{r}
origin7_9 <- read_rds("data/rds/origin7_9.rds")
```

## Working with Geospatial Data

Two geospatial data (shapefile) will be used for this exercise:

-   BusStop: Provides location of bus stop as at Q4 2022

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019

### Importing geospatial data

```{r}
busstop <- st_read(dsn = "Data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)

```

Check structure of `busstop` sf tibble data frame

```{r}
glimpse(busstop)
```

Repeat for MPSZ

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Check structure of `mpsz` sf tibble data frame

```{r}
glimpse(mpsz)
```

## Geospatial Data Wrangling

## Combining Busstop & mpsz

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

Save output into rds format

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")  
```

Append the planning subzone code from busstop_mpsz onto odbus7_9 data frame.

```{r}
origin_data <- left_join(origin7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C)
```

Check for duplicate records

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Retain unique records only

```{r}
origin_data <- unique(origin_data)
```

Update ob_data with the planning subzone codes

```{r}
mpsz_origtrip <- left_join(mpsz, 
                           origin_data,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

## **Choropleth Visualisation**

Choropleth map showing the distribution of passenger trips at planning sub-zone level.

```{r}
tm_shape(mpsz_origtrip)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```
