---
title: "In class Exercise 5"
subtitle: "Spatial Econometric Interaction Models"
date: "16 Dec 2023"
date-modified: "last-modified"
format: html
editor: visual
---

## Getting Started

Use development version from GitHub (can also use CRAN version if preferred)

```{r}
devtools::install_github("LukeCe/spflow")
```

```{r}
pacman::p_load(tmap, sf, spdep, sp, Matrix, spflow, knitr, tidyverse)
```

## Data Preparation

3 data sets are required:

- Spatial Weights
- tibble data.frame consisting of origin, destination, flows & distances between the origin and destination
- tibble data.frame consisting of the explanatory variables

# Retriving Data

```{r}
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```

## Preparing spflow objects

### Creating `spflow_network-class` objects

Contiguity based neighbourhood structure used

```{r}
mpsz_net <- spflow_network(
  id_net = "sg", #id_net can name anything you want
  node_neighborhood = 
    nb2mat(mpsz_nb$by_continguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE")

mpsz_net
```

### Creating `spflow_net_pair`

```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ")

mpsz_net_pairs
```

### Creating `spflow_net_multi-class` object

Combine *mpsz_net* and *mpsz_net_pairs*

```{r}
mpsz_multi_net <- spflow_network_multi(mpsz_net, mpsz_net_pairs)

mpsz_multi_net
```

## Correlation Analysis

Check for multicollinearity (important for explanatory models)

```{r}
cor_formula <- log(1 + TRIPS) ~ #dependent variable, +1 to avoid log0
  BUSSTOP_COUNT +
  AGE7_12 +
  AGE13_24 +
  AGE25_64 +
  SCHOOL_COUNT +
  BUSINESS_COUNT +
  RETAILS_COUNT +
  FINSERV_COUNT +
  P_(log(DISTANCE + 1)) #P represents impedance for distance

cor_mat <- pair_cor(
  mpsz_multi_net,
  spflow_formula = cor_formula,
  add_lags_x = FALSE)

colnames(cor_mat) <- paste0( #label variables
  substr(
    colnames(cor_mat),1,3),"...")

cor_image(cor_mat) #uses cor_plot in bg
```


## Model Calibration

### Base Model

```{r}
base_model <- spflow(
  spflow_formula = log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT + 
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1)),
  spflow_networks = mpsz_multi_net)
  
base_model
```

### Residual Diagnositcs

```{r}
old_par = par(mfrow = c(1,3),
              mar = c(2,2,2,2))

spflow_moran_plots(base_model)
```


```{r}
par(old_par)

corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
cor_image(corr_residual)
```

```{r}
plot(base_model)
```


Model 8 - Origin & Destination Constrained

```{r}
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT + 
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_8")
  
mle_model8 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model8
```

Model 1 - Uncontrained

```{r}
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT + 
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_1")
  
mle_model1 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model1
```

Model 2 - Destination Constrainted

```{r}
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT + 
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_2")
  
mle_model2 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model2
```

Model 9 - Unconstrained (Poorest performance)

```{r}
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT + 
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_9")
  
mle_model9 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model9
```

