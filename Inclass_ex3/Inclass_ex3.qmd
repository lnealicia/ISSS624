---
title: "In class Exercise 3"
subtitle: "Calibrating Spatial Interaction Models with R"
date: "02 Dec 2023"
date-modified: "last-modified"
format: html
editor: visual
---

## **Getting Started**

-   sf - importing, integrating, processing and transforming geospatial data.

-   tidyverse - importing, integrating, wrangling and visualising data.

-   tmap - creating thematic maps.

```{r}
pacman::p_load(tmap, sf, sp, DT,
               performance, reshape2,
               ggpubr, tidyverse)
```

## **Preparing the Flow Data**

The following data will be used:

-   *od_data.rds*, weekday morning peak passenger flows at planning subzone level

-   *mpsz.rds*, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format

An additional attribute data file called pop.csv is also used

### **Importing the mpsz data**

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

Note: mpsz is a tibble dataframe object class

### **Converting from sf data.table to SpatialPolygonsDataFrame**

 *mpsz*  is converted from sf tibble data frame to SpatialPolygonsDataFrame of sp object

```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp
```

### **Computing the distance matrix**

Euclidean distance between the centroids of the planning subzones

```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

Note: Output dist is a matrix object class of R. Column heanders and row headers are also not labeled with the planning subzone codes.

## **Labelling column and row headers of a distance matrix**

Create a list sorted according to the the distance matrix by planning sub-zone code.

```{r}
sz_names <- mpsz$SUBZONE_C
```

Attach `SUBZONE_C` to row and column for distance matrix matching

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### **Pivoting distance value by SUBZONE_C**

Pivot the distance matrix into a long table by using the row and column subzone codes

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

Note: Within zone distance is 0

### **Updating intra-zonal distances**

Append a constant value to replace the intra-zonal distance of 0.

Select and find out the minimum value of the distance

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

Constant distance value of 50m is added into intra-zones distance

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

Check resulting data frame

```{r}
distPair %>%
  summary()
```

Rename the origin and destination fields

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

Save the dataframe as rds format

```{r}
write_rds(distPair, "chap16/data/rds/distPair.rds") 
```

## **Preparing flow data**

```{r}
od_data <- read_rds("data/rds/od_data.rds")

```

Compute the total passenger trip between and within planning subzones. The resulting output is flow data

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

```{r}
write_rds(od_data, "Data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("Data/rds/od_data.rds")
```

## **Visualising Spatial Interaction**

### **Removing intra-zonal flows**

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### **Creating desire lines**

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### **Visualising the desire lines**

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
