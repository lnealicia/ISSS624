
## Converting from sf data.table to SpatialPolygonsDataFrame

`grid_sf` is converted from sf tibble data frame to SpatialPolygonsDataFrame of sp object

```{r}
grid_sp <- as(grid_sf, "Spatial")
grid_sp
```

## Computing the distance matrix

Euclidean distance between the centroids of the hexagons

```{r}
euc_dist <- spDists(grid_sp, 
                longlat = FALSE)
head(euc_dist, n=c(10, 10))
```

Note: Output distance is a matrix object class of R. Column headers and row headers are also not labeled with the hexagon grid id.

### Labelling column and row headers of distance matrix

Create a list sorted according to the the distance matrix by hexagon grid id

```{r}
grid_id <- grid_sf$grid_id
```

Attach `grid_id` to row and column for distance matrix matching

```{r}
colnames(euc_dist) <- paste0(grid_id)
rownames(euc_dist) <- paste0(grid_id)
```

### Pivoting distance value by `grid_id`

Pivot the distance matrix into a long table by using the row and column hexagons

```{r}
dist_pair <- melt(euc_dist) %>%
  rename(euc_dist = value)
head(dist_pair, 10)
```

Note: Within zone distance (aka origin and destination grid) is 0

### Updating intra-zonal distances

Select and find out the minimum distance

```{r}
summary(dist_pair)
```

Append a small constant value of 50m to replace the intra-zonal distance of 0.

```{r}
dist_pair$euc_dist <- ifelse(dist_pair$euc_dist < 1,
                        50, dist_pair$euc_dist)
```

Check resulting data frame

```{r}
dist_pair %>%
  summary()
```

Rename the origin and destination fields

```{r}
dist_pair <- dist_pair %>%
  rename(orig = Var1,
         dest = Var2)
```

Save the dataframe as rds format

```{r}
write_rds(dist_pair, "data/rds/dist_pair.rds") 
```

## Compute the Total Passenger Trips (Between and Within Hexagons)

```{r}
flow_data <- wdmp %>%
  group_by(o_grid_id, d_grid_id) %>% 
  summarize(TRIPS = sum(TRIPS)) 
```

Display `flow_data` dataframe

```{r}
head(flow_data, 10)
```

### Separating intra-flow (within hexagon) from passenger volume df

Add three new fields in `flow_data` dataframe

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$o_grid_id == flow_data$d_grid_id, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$o_grid_id == flow_data$d_grid_id,
  0.000001, 1)
```

### Combining passenger volume data with distance value

left_join() `flow_data` dataframe and `dist_P_pair` dataframe

```{r}
flow_data1 <- flow_data %>%
  left_join (dist_pair,
             by = c("o_grid_id" = "orig",
                    "d_grid_id" = "dest"))
```

Save output as SIM_data.rds

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```
