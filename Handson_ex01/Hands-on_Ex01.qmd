---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learned how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and load sf and tidyverse packages into R environment

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "Data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### **Importing polyline feature data in shapefile form**

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "Data/geospatial", 
                         layer = "CyclingPathGazette")
```

### **Importing GIS data in kml format**

The `pre-schools-location-kml` is in kml format. The code chunk below will be used to import the kml into R.

```{r}
preschool = st_read("data/geospatial/preschoolslocation.kml")
```

## **Checking the Content of A Simple Feature Data Frame**

In this sub-section, I learned different ways to retrieve information related to the content of a simple feature data frame.

### **Working with *st_geometry()***

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column using *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

### **Working with glimpse()**

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### **Working with *head()***

Sometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R.

```{r}
head(mpsz, n=5)  
```

## **Plotting the Geospatial Data**

In geospatial data science, we are also interested to visualise the geospatial features.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```
