---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learned how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and load sf and tidyverse packages into R environment

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "Data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### **Importing polyline feature data in shapefile form**

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "Data/geospatial", 
                         layer = "CyclingPathGazette")
```

### **Importing GIS data in kml format**

The `pre-schools-location-kml` is in kml format. The code chunk below will be used to import the kml into R.

```{r}
preschool = st_read("data/geospatial/preschoolslocation.kml")
```

## **Checking the Content of A Simple Feature Data Frame**

In this sub-section, I learned different ways to retrieve information related to the content of a simple feature data frame.

### **Working with *st_geometry()***

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column using *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

### **Working with glimpse()**

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### **Working with *head()***

Sometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R.

```{r}
head(mpsz, n=5)  
```

## **Plotting the Geospatial Data**

In geospatial data science, we are also interested to visualise the geospatial features.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

## **Working with Projection**

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, both geospatial data need to be projected using similar coordinate system.

In this section, I learned how to project a simple feature data frame from one coordinate system to another coordinate system aka **projection transformation**.

### **Assigning EPSG code to a simple feature data frame**

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### **Transforming the projection of preschool from wgs84 to svy21.**

In geospatial analytics, it is very common to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

## **Importing and Converting An Aspatial Data**

### **Importing the aspatial data**

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

The code chunk below shows *list()* of Base R to examine if the data file has been imported correctly.

```{r}
list(listings) 
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`.

### **Creating a simple feature data frame from an aspatial data frame**

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Note

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country\'s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. A new column called `geometry` has been added into the data frame. The `longitude` and `latitude` columns have been dropped from the data frame.

## **Geoprocessing with sf package**

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I learned how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### **Buffering**

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### **Point-in-polygon count**

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

**Note: Different from [st_intersection()](#0).**

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

The [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used to list the planning subzone with the most number of pre-schools

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The solution:

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```
